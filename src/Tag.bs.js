// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_List = require("bs-platform/lib/js/belt_List.js");

((require('./style.scss')));

function Tag(Props) {
  var match = Props.tags;
  var tags = match !== undefined ? match : /* [] */0;
  var setTags = Props.setTags;
  var match$1 = React.useState((function () {
          return "";
        }));
  var setText = match$1[1];
  var text = match$1[0];
  var removeSpaceText = function (text) {
    return text.slice(0, text.length - 1 | 0);
  };
  var renderTags = function (param) {
    return $$Array.of_list(List.mapi((function (index, item) {
                      return React.createElement("li", {
                                  key: String(index),
                                  className: "tag"
                                }, React.createElement("span", {
                                      className: "tag-title"
                                    }, item), React.createElement("span", {
                                      className: "tag-close-icon",
                                      onClick: (function (param) {
                                          var index$1 = index;
                                          var newTags = Belt_List.filterWithIndex(tags, (function (param, indexTag) {
                                                  return indexTag !== index$1;
                                                }));
                                          return Curry._1(setTags, (function (param) {
                                                        return newTags;
                                                      }));
                                        })
                                    }, "x"));
                    }), tags));
  };
  var validEvent = function ($$event) {
    var keyCode = $$event.keyCode;
    if (keyCode !== 13) {
      return keyCode === 32;
    } else {
      return true;
    }
  };
  var handleTextChange = function ($$event) {
    var valueChange = $$event.target.value;
    var lastChar = valueChange.charAt(valueChange.length - 1 | 0);
    var valueText = lastChar === " " ? removeSpaceText(String(valueChange)) : valueChange;
    return Curry._1(setText, (function (param) {
                  return valueText;
                }));
  };
  return React.createElement("div", {
              className: "tags-input"
            }, React.createElement("ul", {
                  id: "tags"
                }, renderTags(/* () */0)), React.createElement("input", {
                  placeholder: "Pressione a tecla enter ou espa\xc3\xa7o",
                  type: "text",
                  value: text,
                  onKeyUp: (function ($$event) {
                      var match = validEvent($$event) === true;
                      if (match) {
                        var newTags = $$Array.map((function (tagValue) {
                                return String(tagValue);
                              }), text.split(" "));
                        Curry._1(setTags, (function (param) {
                                return List.append($$Array.to_list(newTags), tags);
                              }));
                        return Curry._1(setText, (function (param) {
                                      return "";
                                    }));
                      } else {
                        return /* () */0;
                      }
                    }),
                  onChange: handleTextChange
                }));
}

var make = Tag;

exports.make = make;
/*  Not a pure module */
